int main(int argc, char **argv) {
    clock_t start, end; // Variables para medir el tiempo de ejecución
    double cpu_time_used; // Variable para almacenar el tiempo de ejecución
    int nProcesses, rank; // Variables para almacenar el número de procesos y el rango de cada proceso
    int nKeys = (int) pow(10, nRotors); // Calcular el número de claves posibles
    MPI_Status status;

    // Inicializando MPI
    start = clock(); // Registrar el tiempo de inicio
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &nProcesses);

    if (rank == 0) { // Proceso padre / maestro
        printf("Numero de procesos esclavos:\t%d\n", nProcesses - 1);
        fflush(stdout);

        printf("Padre inicializado. Comenzando a descifrar\n\n");
        fflush(stdout);

        // Proceso maestro envía las líneas a los procesos esclavos
        for (int i = 1; i < nProcesses; ++i) {
            printf("Enviando lineas al proceso: %d\n", i);
            fflush(stdout);
        }

        // Proceso maestro recibe la respuesta de los procesos esclavos
        printf("Esperando a que los procesos descifren las lineas\n");
        fflush(stdout);

        int decipheredText[nLines][nCharsPerLine]; // Matriz para almacenar las líneas descifradas
        int decipheredLineAux[nCharsPerLine]; // Línea auxiliar para recibir las líneas descifradas

        for (int i = 0; i < nLines; ++i) { // Recibir las líneas descifradas
            MPI_Recv(&decipheredLineAux, nCharsPerLine, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            for (int j = 0; j < nCharsPerLine; ++j) { // Almacenar las líneas descifradas
                decipheredText[i][j] = decipheredLineAux[j];
            }
        }

        printf("\nLíneas descifradas recibidas. Imprimiendo texto descifrado: \n\n");
        fflush(stdout);

        for (int i = 0; i < nLines; i++) { // Imprimir las líneas descifradas
            for (int j = 0; j < nCharsPerLine; j++) {
                printf("%c", decipheredText[i][j]);
            }
            printf("\n");
        }

        end = clock(); // Registrar el tiempo de finalización
        cpu_time_used = (double) ((double) (end - start)) / CLOCKS_PER_SEC; // Calcular el tiempo transcurrido en segundos
        printf("\nTiempo de ejecucion: %f segundos\n", cpu_time_used); // Imprimir el tiempo transcurrido
        printf("\n");

    } else { // Proceso hijo / esclavo
        printf("\nEsclavo %d inicializado\n", rank);
        fflush(stdout);

        // Decifrar las líneas asignadas de manera alternada
        for (int i = rank - 1; i < nLines; i += nProcesses - 1) {
            printf("Comenzando a descifrar la linea %d en el proceso: %d\n", i, rank);
            fflush(stdout);
            for (int j = 0; j < nKeys; j++) {
                int *decipheredLine = decipher(ciphered[i], j); // Decifrar la línea

                char decipheredLineToChar[nCharsPerLine]; // Convertir la línea descifrada a array de char
                for(int r = 0; r < nCharsPerLine; r++) {
                    decipheredLineToChar[r] = decipheredLine[r]; // Almacenar la línea descifrada para luego poder hacer la comparación y enviarlo
                }

                char stringKey[nRotors + 1]; // Convertir la clave int en string
                sprintf(stringKey, "%0*d", nRotors, j); // Asegurar que la clave tiene el mismo número de dígitos que nRotors

                if (!strncmp(stringKey, decipheredLineToChar, nRotors)) { // Comparar la clave con la línea descifrada (los primeros nRotors caracteres)
                    printf("Linea %d descifrada en esclavo %d con clave %d. Enviando linea descifrada de vuelta al proceso padre\n", i, rank, j);
                    fflush(stdout);

                    MPI_Send(decipheredLine, nCharsPerLine, MPI_INT, 0, 0, MPI_COMM_WORLD); // Enviar la línea descifrada al proceso padre
                    break;
                }
                free(decipheredLine); // Liberar memoria de la línea descifrada
            }
        }
        printf("Lineas descifradas en esclavo %d. Cerrando esclavo\n\n", rank);
        fflush(stdout);
    }
    MPI_Finalize(); // Finalizar MPI
    return 0;
}